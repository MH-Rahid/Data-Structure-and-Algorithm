//Data Types in Data Structures and Algorithms:

A data type defines the kind of data a variable can hold, 
how it is stored in memory, and the operations that can be 
performed on it. In the context of data structures and 
algorithms, data types are fundamental because they determine 
how data is structured, accessed, and manipulated to solve 
problems efficiently.


// Types of datatype:

1. primitive datatype - These are the fundamental building blocks of 
data in programming. They are predefined by the language.

a. integer : used for numeric data without a decimal point.
ex - int x = 5;
b. floating-point : for numeric data with decimal point.
ex - float x = 3.4; double y = 5.4;
c. character : represents a single character.
ex - char l = 'm';
d. boolean : represents true or false values.
ex - bool isEven = true;

2.derived datatype - these are built from primitive data types and 
include more complex structure.

a. array : a collection of elements of the same type, stored in
contiguous memory locations.
ex - int arr[5] = {5,4,3,2,6};
b. Pointer: holds the memory address of another variable.
ex - int *p = &x; here x must be int type.
c. structure : a collection of variables of different types.
ex - struct str{ int x; int *y; float z };

3. Abstract data type:
a. list : an ordered collection of elements.
b. stack : follows last in first out(lifo) principle.u
c. queue : follows first in first out (fifo) principle.
d. de-que : a double ended queue.
e. set : A collection of unique elements.
f. map(dictionary) : a collection of key value pairs.

4. user-defined datatype: Programmers can create these data types 
to represent specific data more effectively.

5. 





